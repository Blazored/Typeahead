@page "/"
@using Blazored.Typeahead.DynamicComponent
@inject HttpClient httpClient

<h1>Blazored Typeahead - Form</h1>

<EditForm Model="FormModel" OnValidSubmit="HandleFormSubmit">
    <DataAnnotationsValidator />

    <BlazoredTypeahead SearchMethod="GetPeopleLocal"
                       @bind-Value="FormModel.SelectedPerson"
                       EnableDropDown="true"
                       placeholder="Search by first name..."
                       @ref="LocalBlazoredTypeahead">
        <SelectedTemplate Context="person">
            @person.Firstname
        </SelectedTemplate>
        <ResultTemplate Context="person">
            @person.Firstname @person.Lastname
        </ResultTemplate>
    </BlazoredTypeahead>
    <ValidationMessage For="@(() => FormModel.SelectedPerson)" />

    <button class="btn btn-primary" type="submit" style="margin-top: 20px;">Submit</button>
    <button class="btn btn-info" type="button" style="margin-top: 20px" @onclick="@(_ => LocalBlazoredTypeahead.Focus())">Focus</button>
</EditForm>

<hr />

@if (FormModel.SelectedPerson != null)
{
    <br />
    <p><strong>Selected Person:</strong> @FormModel.SelectedPerson.Firstname @FormModel.SelectedPerson.Lastname</p>
}

<hr />

<h1>Blazored Typeahead - Standalone</h1>


<BlazoredTypeahead SearchMethod="GetPeopleLocal"
                   @bind-Value="SelectedPerson"
                   placeholder="Search by first name...">
    <SelectedTemplate Context="person">
        @person.Firstname
    </SelectedTemplate>
    <ResultTemplate Context="person">
        @person.Firstname @person.Lastname
    </ResultTemplate>
</BlazoredTypeahead>

<hr />

@if (SelectedPerson != null)
{
    <p>Selected: @SelectedPerson.Firstname @SelectedPerson.Lastname</p>
}

<hr />

<h1>Blazored Typeahead - Disabled</h1>

<BlazoredTypeahead SearchMethod="@GetPeopleLocal"
                   @bind-Value="@SelectedPerson"
                   Disabled="IsDisabled"
                   placeholder="Search by first name...">
    <SelectedTemplate Context="person">
        @person.Firstname
    </SelectedTemplate>
    <ResultTemplate Context="person">
        @person.Firstname @person.Lastname
    </ResultTemplate>
</BlazoredTypeahead>

<button class="btn btn-primary" style="margin-top: 20px;" @onclick="@(() => IsDisabled = !IsDisabled)">@(IsDisabled ? "Enable" : "Disable")</button>

<hr />

<h1>Blazored Typeahead - Disabled (Null Value)</h1>

<BlazoredTypeahead SearchMethod="@GetPeopleLocal"
                   @bind-Value="@SelectedPersonNull"
                   Disabled="IsDisabled"
                   placeholder="Search by first name...">
    <SelectedTemplate Context="person">
        @person.Firstname
    </SelectedTemplate>
    <ResultTemplate Context="person">
        @person.Firstname @person.Lastname
    </ResultTemplate>
</BlazoredTypeahead>

<button class="btn btn-primary" style="margin-top: 20px;" @onclick="@(() => IsDisabled = !IsDisabled)">@(IsDisabled ? "Enable" : "Disable")</button>

<hr />

<h1>Blazored Typeahead - Binding to different type</h1>

<BlazoredTypeahead SearchMethod="GetPeopleLocal"
                   ConvertMethod="ConvertPerson"
                   @bind-Value="SelectedPersonId"
                   placeholder="Search by first name...">
    <SelectedTemplate Context="personId">
        @{
            var selectedPerson = LoadSelectedPerson(personId);

            <text>@selectedPerson?.Firstname @selectedPerson?.Lastname</text>
        }
    </SelectedTemplate>
    <ResultTemplate Context="person">
        @person.Firstname @person.Lastname (Id: @person.Id)
    </ResultTemplate>
</BlazoredTypeahead>

<hr />

@if (SelectedPersonId != null && SelectedPersonId > 0)
{
    <p>Selected Person Id: @SelectedPersonId</p>
}

<hr />

<h1>Blazored Typeahead - Multi-select</h1>

<BlazoredTypeahead SearchMethod="GetPeopleLocal"
                   @bind-Values="SelectedPeople"
                   Disabled="IsDisabledMulti"
                   EnableDropDown="true"
                   placeholder="Search by first name...">
    <SelectedTemplate Context="person">
        @person.Firstname
    </SelectedTemplate>
    <ResultTemplate Context="person">
        @person.Firstname @person.Lastname (Id: @person.Id)
    </ResultTemplate>
</BlazoredTypeahead>

<button class="btn btn-primary" style="margin-top: 20px;" @onclick="@(() => IsDisabledMulti = !IsDisabledMulti)">@(IsDisabledMulti ? "Enable" : "Disable")</button>

<hr />

@if (SelectedPeople != null)
{
    <p>Selected People:</p>
    foreach (var person in SelectedPeople)
    {
        <p>@person.Firstname @person.Lastname</p>
    }
    <hr />
}

<h1>Blazored Typeahead - Multi-select - Adding items on empty search result</h1>

<BlazoredTypeahead SearchMethod="GetPeopleLocal"
                   @bind-Values="SelectedPeopleWithNotFoundTemplate"
                   Disabled="IsDisabledMulti"
                   EnableDropDown="true"
                   MinimumLength="2"
                   AddItemOnEmptyResultMethod="ItemAddedMethod"
                   placeholder="Search by first name...">
    <SelectedTemplate Context="person">
        @person.Firstname
    </SelectedTemplate>
    <HelpTemplate>
        Please enter a minimum of 2 characters to perform a search.
    </HelpTemplate>
    <NotFoundTemplate Context="searchText">
        Add "@searchText" as a new user <br />
        The newly added user will be selected after being added.
    </NotFoundTemplate>
    <ResultTemplate Context="person">
        @person.Firstname @person.Lastname (Id: @person.Id)
    </ResultTemplate>
</BlazoredTypeahead>
<button class="btn btn-primary" style="margin-top: 20px;" @onclick="@(() => IsDisabledMulti = !IsDisabledMulti)">@(IsDisabledMulti ? "Enable" : "Disable")</button>
<hr />

@if (SelectedPeopleWithNotFoundTemplate != null)
{
    <p>Selected People:</p>
    foreach (var person in SelectedPeopleWithNotFoundTemplate)
    {
        <p>@person.Firstname @person.Lastname</p>
    }
    <hr />
}

<h1>Blazored Typeahead - Header and footer templates</h1>

<BlazoredTypeahead SearchMethod="GetPeopleLocal"
                   @bind-Value="SelectedPerson"
                   placeholder="Search by first name...">
    <SelectedTemplate Context="person">
        @person.Firstname
    </SelectedTemplate>
    <HeaderTemplate>
        Header template
    </HeaderTemplate>
    <ResultTemplate Context="person">
        @person.Firstname @person.Lastname
    </ResultTemplate>
    <FooterTemplate>
        Footer template
    </FooterTemplate>
</BlazoredTypeahead>

<hr />

@if (SelectedPersonId != null && SelectedPersonId > 0)
{
    <p>Selected Person Id: @SelectedPersonId</p>
    <hr />
}


<h1>Blazored Typeahead - Dynamic-select - Create component using the dynamic component builder</h1>

@if (_blazoredTypeaheadBuilder != null)
{
    @_blazoredTypeaheadBuilder.BuildTypeaheadComponent(StateHasChanged)
}

<button class="btn btn-primary" style="margin-top: 20px;" @onclick="@(AddFooterTemplate)">@(_blazoredTypeaheadBuilder.FooterTemplate == null ? "Add footer template" : "Remove footer template")</button>
<button class="btn btn-primary" style="margin-top: 20px;" @onclick="@(ChangeComponentType)">@(_blazoredTypeaheadBuilder.IsMultiSelect ? "Switch to single select" : "Switch to multi-select")</button>
<hr />

<h1>Blazored Typeahead - Dynamic-select - Create component using the typeaheadmodel component</h1>

<BlazoredTypeaheadModel ConfigModel="_configModelForComponent"></BlazoredTypeaheadModel>

<button class="btn btn-primary" style="margin-top: 20px;" @onclick="@(AddFooterTemplateForComponent)">@(_configModelForComponent.FooterTemplate == null ? "Add footer template" : "Remove footer template")</button>
<button class="btn btn-primary" style="margin-top: 20px;" @onclick="@(ChangeComponentTypeForComponent)">@(_configModelForComponent.IsMultiSelect ? "Switch to single select" : "Switch to multi-select")</button>
<button class="btn btn-primary" style="margin-top: 20px;" @onclick="@(ChangeModelReference)">Change model reference</button>
<hr />

@code {

    private bool IsDisabled = true;
    private bool IsDisabledMulti;

    private List<Person> People = new List<Person>();

    private Person SelectedPerson;
    private Person SelectedPersonNull;
    private int? SelectedPersonId;
    private IList<Person> SelectedPeople;
    private IList<Person> SelectedPeopleWithNotFoundTemplate;
    private FormExample FormModel = new FormExample();
    private BlazoredTypeahead<Person, Person> LocalBlazoredTypeahead;

    protected override void OnInitialized()
    {
        CreateTypeaheadComponent();

        People.AddRange(new List<Person>() {
            new Person() { Id = 1, Firstname = "Martelle", Lastname = "Cullon" },
            new Person() { Id = 2, Firstname = "Zelda", Lastname = "Abrahamsson" },
            new Person() { Id = 3, Firstname = "Benedetta", Lastname = "Posse" },
            new Person() { Id = 4, Firstname = "Benoite", Lastname = "Gobel" },
            new Person() { Id = 5, Firstname = "Charlot", Lastname = "Fullicks" },
            new Person() { Id = 6, Firstname = "Vinson", Lastname = "Turbat" },
            new Person() { Id = 7, Firstname = "Lenore", Lastname = "Malam" },
            new Person() { Id = 8, Firstname = "Emanuele", Lastname = "Kolakovic" },
            new Person() { Id = 9, Firstname = "Rosalyn", Lastname = "Mackin" },
            new Person() { Id = 10, Firstname = "Yanaton", Lastname = "Krishtopaittis" },
            new Person() { Id = 11, Firstname = "Frederik", Lastname = "McGeachie" },
            new Person() { Id = 12, Firstname = "Parrnell", Lastname = "Ramsby" },
            new Person() { Id = 13, Firstname = "Coreen", Lastname = "McGann" },
            new Person() { Id = 14, Firstname = "Kyle", Lastname = "Coster" },
            new Person() { Id = 15, Firstname = "Evangelia", Lastname = "Bowker" },
            new Person() { Id = 16, Firstname = "Angeli", Lastname = "Collihole" },
            new Person() { Id = 17, Firstname = "Bill", Lastname = "Lawther" },
            new Person() { Id = 18, Firstname = "Kore", Lastname = "Reide" },
            new Person() { Id = 19, Firstname = "Tracy", Lastname = "Gwinnell" },
            new Person() { Id = 20, Firstname = "Lazaro", Lastname = "Partington" },
            new Person() { Id = 21, Firstname = "Doretta", Lastname = "Aingell" },
            new Person() { Id = 22, Firstname = "Olvan", Lastname = "Andraud" },
            new Person() { Id = 23, Firstname = "Templeton", Lastname = "Chetwynd" },
            new Person() { Id = 24, Firstname = "Daile", Lastname = "Kelsow" },
            new Person() { Id = 25, Firstname = "Marcie", Lastname = "Brearty" },
            new Person() { Id = 26, Firstname = "Irwinn", Lastname = "Lilian" },
            new Person() { Id = 27, Firstname = "Niki", Lastname = "Moreland" },
            new Person() { Id = 28, Firstname = "Honey", Lastname = "Waddup" },
            new Person() { Id = 29, Firstname = "Amber", Lastname = "Hoopper" },
            new Person() { Id = 30, Firstname = "Delilah", Lastname = "Dougary" },
            new Person() { Id = 31, Firstname = "Tory", Lastname = "Ovington" },
            new Person() { Id = 32, Firstname = "Doralin", Lastname = "Conrard" },
            new Person() { Id = 33, Firstname = "Eugene", Lastname = "Custard" },
            new Person() { Id = 34, Firstname = "Corella", Lastname = "Peotz" },
            new Person() { Id = 35, Firstname = "Chris", Lastname = "Rayne" },
            new Person() { Id = 36, Firstname = "Alexandro", Lastname = "Kwietek" },
            new Person() { Id = 37, Firstname = "Selie", Lastname = "Tenwick" },
            new Person() { Id = 38, Firstname = "Corliss", Lastname = "Haensel" },
            new Person() { Id = 39, Firstname = "Misti", Lastname = "Jikylls" },
            new Person() { Id = 40, Firstname = "Rosaline", Lastname = "Jephson" },
            new Person() { Id = 41, Firstname = "Irene", Lastname = "Farnsworth" },
            new Person() { Id = 42, Firstname = "Dominique", Lastname = "O'Shiels" },
            new Person() { Id = 43, Firstname = "Mellie", Lastname = "Cyson" },
            new Person() { Id = 44, Firstname = "Madelena", Lastname = "Chin" },
            new Person() { Id = 45, Firstname = "Charlotte", Lastname = "Clixby" },
            new Person() { Id = 46, Firstname = "Samara", Lastname = "Shavel" },
            new Person() { Id = 47, Firstname = "Brod", Lastname = "Kitt" },
            new Person() { Id = 48, Firstname = "Maridel", Lastname = "Dalley" },
            new Person() { Id = 49, Firstname = "Wini", Lastname = "Hundley" },
        });

        SelectedPerson = new Person(12, "Charles", "The Great", 66, "Belgium");
    }

    private async Task<IEnumerable<Person>> GetPeopleLocal(string searchText)
    {
        return await Task.FromResult(People.Where(x => x.Firstname.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private void HandleFormSubmit()
    {
        Console.WriteLine("Form Submitted Successfully!");
    }

    public int? ConvertPerson(Person person)
    {
        return person?.Id;
    }

    public Person LoadSelectedPerson(int? id)
    {
        return People.FirstOrDefault(p => p.Id == id);
    }

    private readonly Random _random = new Random();
    private Task<Person> ItemAddedMethod(string searchText)
    {
        var randomPerson = People[_random.Next(People.Count - 1)];
        var newPerson = new Person(_random.Next(1000, int.MaxValue), searchText, randomPerson.Lastname, _random.Next(10, 70), randomPerson.Location);
        People.Add(newPerson);
        return Task.FromResult(newPerson);
    }

    private BlazoredTypeaheadBuilder<Person, Person> _blazoredTypeaheadBuilder;

    private BlazoredTypeaheadConfigModel<Person, Person> _configModel;
    private BlazoredTypeaheadConfigModel<Person, Person> _configModelForComponent;

    private void CreateTypeaheadComponent()
    {
        _configModel = new BlazoredTypeaheadConfigModel<Person, Person>
        {
            IsMultiSelect = true,
            SearchMethod = GetPeopleLocal,
            SelectedTemplate = _createDynamicComponent,
            ResultTemplate = _createDynamicComponent,
            EnableDropDown = true,
            Debounce = 300,
            MinimumLength = 2,
            ShowDropDownOnFocus = true,
            Placeholder = "dynamic component",
            AdditionalAttributes = new ObservableDictionary<string, object> { { "id", "dynamic-aliases" } }
        };

        _blazoredTypeaheadBuilder = new BlazoredTypeaheadBuilder<Person, Person>(_configModel, true);

        _configModelForComponent = new BlazoredTypeaheadConfigModel<Person, Person>
        {
            IsMultiSelect = true,
            SearchMethod = GetPeopleLocal,
            SelectedTemplate = _createDynamicComponent,
            ResultTemplate = _createDynamicComponent,
            EnableDropDown = true,
            Debounce = 300,
            MinimumLength = 2,
            ShowDropDownOnFocus = true,
            Placeholder = "dynamic component using component",
            AdditionalAttributes = new ObservableDictionary<string, object> { { "id", "dynamic-aliases" } }
        };
    }

    private void AddFooterTemplate()
    {
        // Alternatively, setting the _configModel.FooterTemplate would do the same as this code
        _blazoredTypeaheadBuilder.FooterTemplate = _blazoredTypeaheadBuilder.FooterTemplate == null ? _createDynamicFooter : null;
    }

    private void AddFooterTemplateForComponent()
    {
        // Set the footer template for the component config
        _configModelForComponent.FooterTemplate = _configModelForComponent.FooterTemplate == null ? _createDynamicFooter : null;
    }

    private void ChangeComponentType()
    {
        _configModel.IsMultiSelect = !_configModel.IsMultiSelect;

        // Alternatively, using the code beneath will manually change the builder to use multiselect
        // if (_blazoredTypeaheadBuilder.IsMultiSelect)
        // {
        //     _blazoredTypeaheadBuilder.ChangeToSingleSelect(() => _configModel.Value, person => _configModel.Value = person);
        // }
        // else
        // {
        //     _blazoredTypeaheadBuilder.ChangeToMultiSelect(() => _configModel.Values, people => _configModel.Values = people);
        // }
    }

    private void ChangeComponentTypeForComponent()
    {
        // Set the multi-select for the component config
        _configModelForComponent.IsMultiSelect = !_configModelForComponent.IsMultiSelect;
    }

    private void ChangeModelReference()
    {
        // For some reason wasm crashes when working with a data serializer so we only create a new reference and not a copy of an existing reference
        _configModelForComponent = new BlazoredTypeaheadConfigModel<Person, Person>
        {
            Value = People[_random.Next(People.Count)],
            IsMultiSelect = false,
            SearchMethod = GetPeopleLocal,
            SelectedTemplate = _createDynamicComponent,
            ResultTemplate = _createDynamicComponent,
            EnableDropDown = true,
            Debounce = 300,
            MinimumLength = 2,
            ShowDropDownOnFocus = true,
            Placeholder = "dynamic component using component",
            AdditionalAttributes = new ObservableDictionary<string, object> { { "id", "dynamic-aliases" } }
        };
    }

    readonly RenderFragment<Person> _createDynamicComponent = message => __builder =>
    {
        @message.FullName
    };

    readonly RenderFragment _createDynamicFooter = __builder =>
    {
        <button class="btn btn-outline-primary">Constructed using the dynamic component builder</button>
    };
}
